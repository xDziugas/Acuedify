@model PlayDetails

@{
    ViewData["Title"] = "Index";
}

<head>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <link rel="stylesheet" type="text/css" href="~/css/StyleSheet.css">
</head>
<body>
    <div class="quiz-container">

        <div class="progress">
            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="@(Model.CurrentIndex + 1)" aria-valuemin="0" aria-valuemax="@(Model.Quiz.Questions.Count)" style="width: @(((double)(Model.CurrentIndex + 1) / Model.Quiz.Questions.Count) * 100)%;"></div>
        </div>

        <div class="header-container">
            <div class="timer">
                <span id="timer">00:00</span>
            </div>
            <div class="quiz-info">
                <div class="title">
                    Title: @Model.Quiz.Title
                </div>
                <div class="description">
                    Description: @Model.Quiz.Description
                </div>
            </div>
            <div class="card-count">
                @(Model.CurrentIndex + 1) / @Model.Quiz.Questions.Count
            </div>
        </div>

        <div class="flashcard-container" id="flashcard-container">
            <partial name="_FlashcardContent" , model="Model.Quiz.Questions[Model.CurrentIndex]" />
        </div>

        <div class="review">
            <div class="review-btns">
                <input type="checkbox" id="correct-checkbox" class="btn-check" autocomplete="off" hidden>
                <label class="btn btn-outline-success btn-sm" for="correct-checkbox">Correct</label>

                <input type="checkbox" id="incorrect-checkbox" class="btn-check" autocomplete="off" hidden>
                <label class="btn btn-outline-danger btn-sm" for="incorrect-checkbox">Incorrect</label>

                <input type="hidden" id="selected-answer" value="">
            </div>


            <div class="btn-next">
                <a href="#" class="btn btn-outline-primary btn-sm" id="next-button" data-quiz-id="@Model.Quiz.Id" data-question-index="@Model.CurrentIndex">
                    <svg width="16" height="16" viewBox="0 0 16 16">
                        <use xlink:href="Icons/Icons.svg#icon-next"></use>
                    </svg>
                    Next
                </a>
            </div>
        </div>
    </div>
    <script>
        function rotateCard(card) {
            card.classList.toggle("flipped");
        }
    </script>
    <script>
        function updateProgressBar(currentQuestionIndex, totalQuestions) {
            var progress = ((currentQuestionIndex + 1) / totalQuestions) * 100;
            var progressBar = document.querySelector('.progress-bar');
            progressBar.style.width = progress + '%';
        }
    </script>
    <script>
        let correctCount = 0;
        let incorrectCount = 0;

        document.addEventListener('DOMContentLoaded', () => {
            const correctCheckbox = document.getElementById('correct-checkbox');
            const incorrectCheckbox = document.getElementById('incorrect-checkbox');

            correctCheckbox.addEventListener('change', function () {
                if (correctCheckbox.checked) {
                    incorrectCheckbox.checked = false;
                }
            });

            incorrectCheckbox.addEventListener('change', function () {
                if (incorrectCheckbox.checked) {
                    correctCheckbox.checked = false;
                }
            });

            document.addEventListener('click', async function (e) {
                if (e.target && e.target.id === 'next-button') {

                    var quizId = e.target.getAttribute('data-quiz-id');
                    var currentQuestionIndex = parseInt(e.target.getAttribute('data-question-index'), 10);
                    var totalQuestions = @Model.Quiz.Questions.Count;

                    // Update statistics based on the selected answer
                    if (correctCheckbox.checked) correctCount++;
                    if (incorrectCheckbox.checked) incorrectCount++;

                    // Reset checkboxes
                    correctCheckbox.checked = false;
                    incorrectCheckbox.checked = false;

                    if (currentQuestionIndex + 1 < totalQuestions) {
                        // Update question index and text
                        var nextQuestionIndex = currentQuestionIndex + 1;
                        e.target.setAttribute('data-question-index', nextQuestionIndex);
                        document.querySelector('.card-count').textContent = `${nextQuestionIndex + 1} / ${totalQuestions}`;
                        updateProgressBar(nextQuestionIndex, totalQuestions);

                        //display the next flashcard
                        fetch(`/Play/GetNextFlashCardPartial?quizId=${quizId}&questionId=${nextQuestionIndex}`)
                            .then(response => response.text())
                            .then(html => {
                                document.getElementById('flashcard-container').innerHTML = html;
                            })
                            .catch(error => console.error('Error fetching next flashcard:', error));
                        if (nextQuestionIndex + 1 === totalQuestions) {

                            // Change to "Back to Library" button
                            e.target.id = 'back-to-library-button';
                            e.target.textContent = 'Return to Library';
                        }
                    }
                }
            });
        });

        document.addEventListener('click', async function (e) {
            if (e.target && e.target.id === 'back-to-library-button') {
                e.preventDefault();
                const quizId = e.target.getAttribute('data-quiz-id');

                // Send statistics and redirect
                try {
                    await sendStatistics(quizId, correctCount, incorrectCount);
                    console.log("Statistics sent successfully");
                    window.location.href = '/Library';
                } catch (error) {
                    console.error("Failed to send statistics", error);
                }
            }
        });

        async function sendStatistics(quizId, correct, incorrect) {
            try {
                const response = await fetch('/Play/SubmitQuizResults', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ quizId, correct, incorrect })
                });
                return response.json();
            } catch (error) {
                console.error('Error:', error);
                throw error;
            }
        }
    </script>
</body>
